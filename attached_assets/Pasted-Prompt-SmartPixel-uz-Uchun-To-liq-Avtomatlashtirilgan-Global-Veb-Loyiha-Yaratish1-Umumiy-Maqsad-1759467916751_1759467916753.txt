Prompt: "SmartPixel.uz" Uchun To'liq Avtomatlashtirilgan, Global Veb-Loyiha Yaratish1. Umumiy Maqsad va Arxitektura"SmartPixel.uz" kompaniyasi uchun zamonaviy frontend, kuchli backend va global ma'lumotlar bazasiga ega bo'lgan to'liq funksional veb-dastur yaratish. Tizim avtomatik ravishda kontent yaratishi, uni saytga va Telegram kanaliga joylashi kerak.Asosiy Texnologiyalar:Frontend: HTML, Tailwind CSS, Vanilla JavaScript (public papkasida).Backend: Node.js, Express.js.Ma'lumotlar Bazasi: Google Firebase Firestore.Avtomatlashtirish: node-cron (vazifalarni rejalashtirish uchun).API'lar: Gemini (matn, rasm, nutq), Telegram Bot API.Hosting: Render.com (yoki shunga o'xshash platforma).2. Backend (server.js va Boshqa Fayllar)2.1. Server Sozlamalari:express yordamida asosiy serverni yaratish.dotenv orqali .env faylidan maxfiy kalitlarni (Gemini API, Firebase Service Account, Telegram Bot Token) o'qish.public papkasidagi statik fayllarni (HTML, CSS, JS) foydalanuvchiga taqdim etish.2.2. API Endpoints (CRUD):Firebase Firestore'dagi har bir kolleksiya (posts, portfolio, submissions, leads) uchun to'liq CRUD (Create, Read, Update, Delete) operatsiyalarini bajaruvchi API endpoint'larini yaratish. Masalan:GET /api/posts: Barcha maqolalarni o'qish.POST /api/posts: Yangi maqola qo'shish.DELETE /api/posts/:id: Maqolani ID bo'yicha o'chirish.Bu endpoint'lar admin panel bilan aloqa qilish uchun ishlatiladi.2.3. Frontend uchun Proksi API:Frontend'dagi (saytdagi) AI demo bo'limlari Gemini API'ga to'g'ridan-to'g'ri murojaat qilmasligi kerak. Buning o'rniga, backend'da /api/proxy/gemini kabi maxsus endpoint yaratilsin. Bu endpoint frontend'dan so'rovni qabul qilib, o'zining maxfiy API kaliti bilan Gemini'ga yuboradi va natijani qaytaradi. Bu xavfsizlik uchun muhim.2.4. Avtomatlashtirilgan Tizim (node-cron):Har Kunlik Kontent Yaratish:node-cron yordamida har kuni ma'lum bir vaqtda (masalan, Toshkent vaqti bilan 09:00 da) ishga tushadigan vazifa yaratish.Vazifa ishga tushganda:Mavzu Tanlash: Oldindan belgilangan mavzular ro'yxatidan birini tasodifiy tanlash.Matn Yaratish: Gemini matn modeliga murojaat qilib, shu mavzuda noyob maqola matni va sarlavhasini generatsiya qilish.Rasm Yaratish: Gemini rasm modeliga (gemini-2.5-flash-image-preview) murojaat qilib, maqola mavzusiga mos rasm yaratish.Bazaga Saqlash: Yaratilgan sarlavha, matn, rasm va kategoriyani Firebase'dagi posts kolleksiyasiga yangi hujjat sifatida saqlash.Telegram'ga Yuborish: O'sha maqolani rasm va matn bilan Telegram kanaliga yuborish.Haftalik Marketing Posti:Haftada bir marta (masalan, Dushanba kuni) ishga tushadigan alohida vazifa yaratish.Bu vazifa Gemini yordamida kompaniya xizmatlarini reklama qiluvchi maxsus marketing postini yaratib, Telegram kanaliga yuborishi kerak.2.5. Fayl Strukturasi:server.js: Asosiy server logikasi.firebase-config.js: Firebase Admin SDK'ni ishga tushiruvchi fayl.package.json: Loyiha bog'liqliklari..env: Barcha maxfiy kalitlar..gitignore: Keraksiz fayllarni Git'dan yashirish uchun.public/: Frontend fayllari.3. Frontend (Asosiy Sayt va Admin Panel)Frontend qismi endi localStorage bilan emas, balki backend'dagi API endpoint'lariga fetch so'rovlarini yuborish orqali ishlashi kerak.3.1. Asosiy Sayt (public/index.html va public/script.js):Ma'lumotlarni Yuklash: Sahifa ochilganda, script.js fetch orqali /api/posts va /api/portfolio endpoint'lariga so'rov yuborib, blog va portfolio ma'lumotlarini olib, sahifaga chizishi kerak.Forma Jo'natish:"Bog'lanish" formasi to'ldirilganda, ma'lumotlar /api/submissions endpoint'iga POST so'rovi orqali yuborilsin."Lead Magnet" formasi to'ldirilganda, telefon raqami /api/leads endpoint'iga POST so'rovi orqali yuborilsin.AI Demo: Barcha AI demo funksiyalari (matn va rasm generatsiya) /api/proxy/gemini endpoint'iga murojaat qilish orqali ishlasin.3.2. Boshqaruv Paneli (public/admin.html va public/admin.js):Ma'lumotlarni Ko'rsatish: Admin panel ochilganda, har bir bo'lim (Mijozlar, Leads, Maqolalar, Portfolio) uchun tegishli API endpoint'iga (/api/submissions, /api/leads va hk.) GET so'rovi yuborilib, ma'lumotlar olinadi va jadvallarga chiziladi.Qo'shish/Tahrirlash: "Yangi qo'shish" yoki "Tahrirlash" tugmasi bosilganda ochilgan modal oynadagi forma to'ldirilib "Saqlash" bosilganda, ma'lumotlar tegishli endpoint'ga POST (yangi uchun) yoki PUT (tahrirlash uchun) so'rovi bilan yuborilishi kerak. Muvaffaqiyatli javobdan so'ng, jadval yangilansin.O'chirish: "O'chirish" tugmasi bosilganda, tasdiqlash so'ralib, keyin tegishli endpoint'ga (/api/posts/D0cUMenT_iD) DELETE so'rovi yuborilishi kerak. Muvaffaqiyatli javobdan so'ng, jadval yangilansin.4. Joylashtirish (Deployment)Loyiha Render.com'ga joylashtirilishi uchun README.md faylida batafsil qo'llanma yozilishi kerak.Qo'llanmada Node.js loyihasini yaratish, GitHub'ga yuklash va Render.com'da Environment Variables (muhit o'zgaruvchilari) orqali .env faylidagi barcha maxfiy kalitlarni to'g'ri sozlash bosqichlari aniq ko'rsatilishi lozim.